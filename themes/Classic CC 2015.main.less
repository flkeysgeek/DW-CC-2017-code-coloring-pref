/* DELETED COPYRIGHT & INSTRUCTIONS during development */

/* Define some variables used in multiple places */
/* 1. Background color for the code view */
@background: #FDFDFD;
/* 2. Foreground color for the code view (Regular strings or text) */
@foreground: #3A3A3A;

/* Code Styling */

.CodeMirror, .CodeMirror-scroll {
	background-color: @background;
	color: @foreground;
}
/* NA */
.CodeMirror-focused .CodeMirror-activeline-background {
	background: #c3c3c3;
}
/* NA */
.show-line-padding .CodeMirror-focused .CodeMirror-activeline-background {
	box-shadow: inset 15px 0 0 0 #000;
}
/* NA */
.CodeMirror-focused .CodeMirror-activeline {
.CodeMirror-gutter-elt {
	background: rgba(0, 0, 0, 0.2);
	color: #fff;
}
/* NA */
.inline-widget .CodeMirror-gutter-elt {
	color: #626262;
}
}
.cm-atom, .cm-string, .cm-string-2, .cm-hr {color: #0008FF;}
.cm-number, .cm-attribute, .cm-plus, .cm-qualifier {color: #1EA1F5;}
.cm-def, .cm-property {color: #7347B9;}
.cm-variable, .cm-variable-2, .cm-variable-3, .cm-operator, .cm-meta {color: @foreground;}
.cm-bracket { color: #5B5B5B; }
.cm-comment {color: #969696; font-style: normal; }
.cm-error, .cm-minus {color: #E96D3B;}
.cm-header {color: #87908e;}
.cm-link {color: #17939D; text-decoration: none;}
.cm-rangeinfo {color: #17939D;}
.cm-bracket, .cm-keyword, .cm-builtin, .cm-tag, .cm-quote {color: #0877BD;}

/* check above against zero dark for completeness not colors
.cm-atom {
  color: #89f5a2 !important;
}
.cm-comment {
  color: #676767 !important;
  font-style: italic;
}
.cm-variable {
  color: #ccc !important;
}
.cm-string {
  color: #f07b3c !important;
}
.cm-keyword {
  color: #8b6ccf !important;
  font-style: italic;
}
.cm-number {
  color: #89f5a2 !important;
}
.cm-operator {
  color: #cdb943 !important;
}
.cm-error {
  background: #9D1E15 !important;
  color: #ccc !important;
}
.cm-s-default .cm-property {
  color: #ccc !important;
}
*/

/* HTML Specific Code Colouring */
.HTML {
	.cm-keyword, .cm-builtin, .cm-tag, .cm-quote, .cm-bracket {
		color: #06639D;
	}
	.cm-number {
		color: #B400B4;
	}
	.cm-atom {
		color: #C737C7;
	}
	.cm-attribute, .cm-qualifier {
		color: #1EA1F5;
	}
	.cm-bracket {
		color: #06639D;
	}
	.cm-property {
		color: #729443;
	}
	.cm-qualifier {
		color: #0008FF;
	}
}

/* PHP Specific Code Colouring */
.PHP{
	.cm-meta {
	  color: #DE2316;
	}
	.cm-keyword, .cm-builtin {
		color: #825CC0;
	}
	.cm-tag {
		color: #06639D;
	}
	.cm-def, .cm-variable {
		color: #545454;
	}
	.cm-bracket {
		color: #006767;
	}
	.cm-string {
		color: #0008FF;
	}
	.cm-operator {
		color: #212121;
	}
	.cm-variable-2 {
		color: #E77E04;
	}
	.cm-number {
		color: #039BE5;
	}
}

/* JavaScript Specific Code Colouring */
.JavaScript {
	.cm-def, .cm-variable, .cm-variable-2, .cm-property, .cm-string-2 {
		color: #545454;
	}
	.cm-property {
		color: #E97F05;
	}
	.cm-string {
		color: #0000D7;
	}
	.cm-keyword, .cm-atom {
		color: #7950BC;
	}
	.cm-number {
		color: #B300B3;
	}
}



/* CSS, SCSS, LESS Specific Code Colouring */
.CSS, .SCSS, .LESS {
	.cm-string, .cm-string-2, .cm-link, .cm-rangeinfo {
		color: #648C2C;
	}
	.cm-tag {
		color: #494949;
	}
	.cm-keyword, .cm-atom, .cm-variable-4, .cm-hr, .cm-number, .cm-attribute, .cm-plus, .cm-error, .cm-minus {
		color: #B400B4;
	}
	.cm-def {
		color: #E57D05;
	}
	.cm-property, .cm-operator, .cm-bracket {
		color: #4A4543;
	}
	.cm-qualifier, .cm-builtin, .cm-quote {
		color: #0007E3;
	}
	.cm-variable, .cm-variable-2, .cm-variable-3 {
		color: darkcyan;
	}
}

/* Extra CSS */

.CodeMirror-searching {
	background-color: #fee994;
	color: #393939 !important;
	&.searching-current-match {
		background-color: #f5a644;
		color: #393939 !important;
	}
}

.CodeMirror-cursor {
	border-left: 1px solid #575757 !important;
}

.CodeMirror-gutters {
	background-color: @background;
	border-right: none;
}
/* sequence numbers */
.CodeMirror-linenumber {
	color: #a7a7a7;
}


/* drag & Select text */
.CodeMirror .CodeMirror-selected {
	background: rgba(199, 199, 199, 0.8);
}

/* drag & Select text, change focus */
.CodeMirror-focused .CodeMirror-selected {
	background: rgba(120,171,222,0.45);
}

/* drag & Select text ,change focus */
.CodeMirror .CodeMirror-selected-codefolding {
	background: rgba(199, 199, 199, 0.8);
}

/* drag & Select text*/
.CodeMirror-focused .CodeMirror-selected-codefolding {
	border: solid 1px rgba(37,56,112,0.67) !important;
	background: rgba(200,209,231,0.50);
	color: #1e1e1e !important;
}

.CodeMirror-overwrite .CodeMirror-cursor {
	border-left: none !important;
	border-bottom: 1px solid #626262;
}

/*
CodeMirror's use of descendant selectors for certain styling causes problems when editors are
nested because, for items in the inner editor, the left-hand clause in the selector will now
match either the actual containing CodeMirror instance *OR* the outer "host" CodeMirror instance.

TODO (issue #324): We'll still have problems if editors can be nested more than one level deep,
or if any other descendant-selector-driven CM styles can differ between inner & outer editors
(potential problem areas include line wrap and coloring theme: basically, anything in codemirror.css
that uses a descandant selector where the CSS class name to the left of the space is something
other than a vanilla .CodeMirror)
*/
.CodeMirror {
.CodeMirror {
	background: transparent;
}

.CodeMirror .CodeMirror-gutters {
	background: transparent;
	border-right: none;
}

.CodeMirror .CodeMirror-activeline-background {
	background: transparent;
}

.CodeMirror .CodeMirror-activeline .CodeMirror-gutter-elt {
	background: transparent;
	color: #767676;
}

.CodeMirror-focused .CodeMirror-activeline-background {
	background: #2f2f2f;
}

.CodeMirror-focused .CodeMirror-activeline {
	.CodeMirror-gutter-elt {
		background: rgba(0, 0, 0, 0.2);
		color: #fff;
	}
}
}
/* dropdown icon - normal */
.CodeMirror-foldgutter-open:after {
	color: #a7a7a7;
}
/* dropdown icon - when closed */
.CodeMirror-foldgutter-folded:after {
	color: #727272;
}
/* dropdown icon - hover */
.CodeMirror.over-gutter, .CodeMirror-activeline {
.CodeMirror-foldgutter-open:after {
	color: #8e8e8e;
}
}
/* three dotted line box */
.CodeMirror-foldmarker {
	border-color: #83ADBB;
	color: #1e1e1e;
	background-color: rgba(6,159,248,0.16);
	box-shadow:  inset 0px 0px 1px 0px #0D3D66;
}

/* Non-editor styling */

.image-view,
.not-editor {
	background-color: @background;
}

.view-pane .image-view {
	color: @foreground;
}

.CodeMirror-matchingbracket, .CodeMirror-matchingtag {
/* Ensure visibility against gray inline editor background */
	background-color: #1654D9;
	color: #ffffff !important;
}

/* Custom code colors or overrides should start after this line */

//////////////////////////////////////////////////////////////////
//				 Classic -- CC 2015  default values             //
//////////////////////////////////////////////////////////////////
@defaultColor:	 #009;
@bracketColor:	 #06639D; 
@defaultBG:		 #FFF;
@hiddenChar:	 #999;
@liveCodeBG:	 #FF7;
@liveCodeChanges:#FCF;
@readOnlyBG:	 #EEE;
@selectionBG:	 #B5D8FD;
@selectionFG:	 #000;
@tagHighlightBG: #E6E6E6;	//TODO: no highlighing if none
@tagHighlightFG: none;		//TODO: override all colors if specified


//_______________________________ CSS ___________________________________
.CSS, .HTML 						//DO NOT ignore on html page
{									//give priority over above css -AND-
	@dw-css-comment: 	#999;
	@dw-css-import: 	#099;		//@import, @media, @...
	@dw-css-media:		#900;		//@... arguments
	@dw-css-important:	#F00;
	@dw-css-property: 	#000;
	@dw-css-selector: 	#F0F;
	@dw-css-string: 	#060;	
	@dw-css-value:	 	#00F;	
										//------------------------------------\\
										//map DW names to CodeMirror variables \\
	@css-comment	: @dw-css-comment;	//--------------------------------------\\
	@css-error		: red;
	@css-errorBG	: white;
	
	@css-def		: @dw-css-import;
	@css-variable 	: @dw-css-media;	//@... arguments
	@css-at-rule    : @dw-css-media;	// firefox ??

	@css-meta      	: @dw-css-import;
	@css-color		: @dw-css-import;

	@css-builtin    : @dw-css-selector; //#id in selector
	@css-tag		: @dw-css-selector;	//html in selector
	@css-qualifier	: @dw-css-selector;	//class in selector
	@css-pseudo		: lighten(@css-qualifier, 25%);	//:pseudo in selector
	
	@css-selector  	: @dw-css-selector;
	@css-selector-matches: darken(@css-qualifier, 15%);
	
	@css-property  	: @dw-css-property;
	@css-atom      	: @dw-css-value;		//property value
	@css-keyword	: lighten(@dw-css-value, 5%);

	@css-string    	: @dw-css-string;
	@css-string-2  	: lighten(@dw-css-value, 25%);
	@css-number    	: lighten(@dw-css-value, 25%);
	
	@css-operator  	: darken(@dw-css-value, 15%);
	@css-variable-2	: lighten(@dw-css-value, 5%);
	@css-url       	: darken(@css-string, 15%);	
	
	@css-important	: @dw-css-important;

	/*******************************************************************
	// CSS devtools Zero Dark Matrix
	@css-at-rule   : #b094bb;
	@css-atom      : #ccc;
	@css-builtin   : #ff9635;
	@css-comment   : #676767;
	@css-def       : #ff9635;
	@css-important : #f00;
	@css-meta      : #6aedff;
	@css-number    : #ccc;
	@css-operator  : #ccc;
	@css-property  : #6aedff;
	@css-qualifier : #ff9635;
	@css-string    : #e3b959;
	@css-string-2  : #ccc;
	@css-tag       : #ff9635;
	@css-variable  : #ff9635;
	@css-variable-2: #ff9635;
	
	@css-selector	: @css-qualifier;				//firefox ??
	@css-keyword	: darken(@css-qualifier, 15%);	//not !important
	@css-pseudo		: lighten(@css-qualifier, 25%);	//variable-2
	@css-url       	: darken(@css-string, 15%);		// ??

	@css-selector  	: @css-qualifier;
	@css-selector-matches: lighten(@css-qualifier, 15%);
	******************************************************************/	
	
	.CodeMirror						//define css using variables
	{
		.cm-css-comment {
		  color: #676767 !important;
		  font-style: italic;
		}
		.cm-css-error { 
			@css-error		: red;
			@css-errorBG	: white;
		}

		.cm-css-meta,					// ??
		::shadow .cm-css-meta			{color: @css-meta}
		
		.webkit-css-color,				// ??
		::shadow .webkit-css-color		{color: @css-color} 

		.cm-css-builtin,				//#id in selector
		::shadow .cm-css-builtin 		{color: @css-builtin;}

		.cm-css-qualifier,				//class in selector
		::shadow .cm-css-qualifier		{color: @css-qualifier}

		.cm-css-tag,					//html in selector
		::shadow .cm-css-tag			{color: @css-tag}
	
		:not(.cm-css-variable-3) {		//don't override :pseudo
			.webkit-css-selector&,		// ??
			::shadow .webkit-css-selector&	{color: @css-selector} 
		}
		.cm-css-property,				//e.g. background
		.webkit-css-property			{color: @css-property}

		.cm-css-atom,					//property value e.g. #FFF
		::shadow .cm-css-atom			{color: @css-meta}
                                                                                       
		.cm-css-def,					//@import, @media, @...
		::shadow .cm-css-def			{color: @css-def} 
		.webkit-css-at-rule,			// firefox ??
		::shadow .webkit-css-at-rule	{color: @css-at-rule}
		
		.cm-css-attribute,				//@media parameters e.g. screen
		.cm-css-variable,				//@... parameters e.g. @import url
		::shadow .cm-css-variable		{color: @css-variable}
		
		.cm-css-keyword,				//assume keyword !important BUT...
		::shadow .cm-css-keyword,
		.webkit-css-keyword,
		::shadow .webkit-css-keyword 	{color: @css-important} 
		
		.cm-property +,					//...NOT !important if follows property
		.cm-attribute + {				//other senarios may also be not !important
			.cm-css-keyword,
			::shadow .cm-css-keyword,
			.webkit-css-keyword,
			::shadow .webkit-css-keyword {color: @css-keyword} 
		}								

		.cm-css-variable-2,				// ??
		::shadow .cm-css-variable-2		{color: @css-variable-2}

		.cm-css-variable-3,				//e.g.	:not, :after :hover
		::shadow .cm-css-variable-3		{color: @css-pseudo}

		.cm-css-operator,				// e.g. > + in selector  ??
		::shadow .cm-css-operator 		{color: @css-operator}

		.cm-css-string,
		.webkit-css-string,
		.CodeMirror .cm-css-string		{color: @css-string}

		.cm-css-string-2,
		::shadow .cm-css-string-2		{color: @css-string-2}

		.cm-css-number					//startsWith #: 100%, 5px, 1em, 5bad, etc
		.webkit-css-number,
		::shadow .cm-css-number,		{color: @css-number}

		.webkit-css-url,				// ??
		::shadow .webkit-css-url 		{color: @css-url}
	}
}

//____________________________ JavaScript _______________________________

// CC 2015 Classic
@dw-js-bracket:		#009;
@dw-js-comment: 	#999;
@dw-js-text:	 	#000;
@dw-js-keyword:	 	#909;
@dw-js-identifier:	#000;
@dw-js-native:	 	#099;
@dw-js-number: 	 	#F00;
@dw-js-operator: 	#00F;
@dw-js-RegExp: 	 	#060;	
@dw-js-reserved:	#009;
@dw-js-string:	 	#00F;
									//map DW legacy selectors to CodeMirror
@js-comment		: @dw-js-comment;
@js-defaultColor: @dw-js-text;
@js-attribute 	: @dw-js-keyword;
@js-meta      	: @dw-js-keyword;
@js-number    	: @dw-js-number;
@js-atom      	: @dw-js-number;		//true/false +??
@js-def       	: @dw-js-identifier;	//var def
@js-variable  	: @dw-js-identifier;	//var ref
@js-variable-2	: @dw-js-identifier;
@js-tag			: @dw-js-bracket;
@js-hr			: @dw-js-bracket;	
@js-keyword		: @dw-js-reserved;
@js-header		: @dw-js-reserved;
@js-link     	: @dw-js-native;
@js-builtin   	: @dw-js-native;
@js-operator  	: @dw-js-operator;
@js-property  	: @dw-js-operator;
@js-string    	: @dw-js-string;
@js-obj-regexp  : @dw-js-RegExp;			//string_2

/*
@js-defaultColor: #CCC;	 		//devtools Zero Dark Matrix
@js-atom      	: #89f5a2;
@js-attribute   : #4e87bf;
@js-builtin     : #8da6ce;
@js-comment     : #676767;
@js-def         : #49a6d2;
@js-error       : #f8f8f8;
@js-header      : #ff6400;
@js-hr          : #aeaeae;
@js-keyword     : #8b6ccf;
@js-link        : #8da6ce;
@js-meta        : #d8fa3c;
@js-number      : #89f5a2;
@js-operator    : #cdb943;
@js-property    : #cdb943;
@js-string      : #f07b3c;
@js-tag         : #49a6d2;
@js-variable    : #ccc;
@js-variable-2  : #ccc;
@js-obj-regexp  : #ff54e8;

*/

.JavaScript, .HTML 					//DO NOT ignore on html page
{									//give priority over above .JavaScript css
	.cm-js-comment { 
		color: @js-comment; 
		font-style: italic; 
	}
	.cm-js-error { 
		color: white; 
		background: red; 
	}
	.cm-js-atom { color: @js-atom }
	.cm-js-attribute { color: @js-attribute; }
	.cm-js-builtin { color: @js-builtin; }
	.cm-js-comment { color: @js-comment; font-style: italic; }
	.cm-js-def { color: @js-def; }
	.cm-js-header { color: @js-header; }
	.cm-js-hr { color: @js-hr; }
	.cm-js-keyword { color: @js-keyword; font-style: italic; }
	.cm-js-link { color: @js-link; }
	.cm-js-meta { color: @js-meta; }
	.cm-js-number { color: @js-number; }
	.cm-js-operator { color: @js-operator;}
	.cm-js-property { color: @js-property; }
	.cm-js-string { color: @js-string; }
	.cm-js-string-2 { color: @js-obj-regexp; }
	.cm-js-tag { color: @js-tag; }
	.cm-js-variable { color: @js-variable; }
	.cm-js-variable-2 { color: @js-variable-2; }
}


//___________________________ HTML ______________________________

@html_attrName: #909;
@html_attrValue:#00F;
@html_comment: 	#999;
@html_number: 	#00F;
@html_special: 	#000;
@html_otherTags:#009;		//??0008FF

/*							//...Adobe/Brackets assumes #FFF
.-();
.-() when (@tagHighlightFG = "none") {@killMatching: !important;}
.-() when (@tagHighlightFG != "none") {@killMatching:;}
*/
@attrName: 	@html_attrName;
@attrValue: @html_attrValue;
@comment: 	@html_comment;
@number: 	@html_number;
@special: 	@html_special;

#makeImportant() {			//see UNFORTUNATELY note below

	.HTML .cm-m-xml {
		
		&.cm-tag, 
		&.cm-quote {
			color: @defaultColor;
			background: @defaultBG;	
		}
		&:not(CodeMirror-matchingtag) {background: @defaultBG;}
		&.CodeMirror-matchingtag {
			background: @tagHighlightBG;
			color: @defaultColor;
		}

		&.cm-tag.CodeMirror-matchingtag:not(.cm-bracket) {
			font-weight: 900;	//super bold tagname for matching tag selection
		}						

		&.cm-tag.CodeMirror-matchingtag {
			background: @tagHighlightBG;
		}
		&.cm-tag.cm-tag-
		{
			&script 	{color: #900;}
			&style 		{color: #909;}

			&a 			{color: #060;}

			&form 		{color: #F90}
			&button, 
			&input, 
			&textarea 	{color: #F90;}

			&object 	{color: #900;}
			&img 		{color: #909;}

			&table, 
			&thead, &tbody, &th, &tbody, &tr, &td {
				color: #099;
			}
		}
									//TODO: use white if not listed below
		
		
		&.cm-comment	{color: @comment};
		&.cm-attribute, 
		&.cm-qualifier 	{color: @attrName};

		&.cm-string 	{color: @attrValue};
		&.cm-number		{color: @number};
		&.cm-special	{color: @special};	
	}
	/*=========================================================================
	UNFORTUNATELY !important is required to override color from below css...
	...defined above -AND- in BracketsDWExtension/.../default-code-coloring.css
	
		.CodeMirror-matchingbracket, .CodeMirror-matchingtag {
			background-color: #1654D9;
			color: #ffffff !important;
		}
	=========================================================================*/
} & { #makeImportant() !important}

/****************************************************************
Start of: Notable code view cursor and selected text or tag(s)
https://github.com/flkeysgeek/DW-CC-2017-code-coloring-pref   

NOTE: 
    DW prefixes all these selectors with "#editor-holder" so 

        body.dark .CodeMirror-cursor

    becomes 
        #editor-holder body.dark .CodeMirror-cursor

    ...so the following form is used to reference body class:

        body.dark & .CodeMirror-cursor {                  

    becomes:
        body.dark #editor-holder .CodeMirror-cursor {                  

*****************************************************************/
body:not(.dark) & span.CodeMirror-matchingbracket {
	background: #A0E2F6;
	color: white !important;
	border-radius: 4px;
	font-weight: 400;
	max-height: 14px;
	transition: all 1.0s 20.0s;
}
						/*************************************/
						/* line numbers -- lighter for dark */
                    	/***********************************/
body.dark & .CodeMirror-linenumber {
    color: #B2B2B2;
}
                    	/***************************************/
                    	/* comments -- not dull grey #919191; */
                    	/*************************************/
body.dark & .cm-comment {
	color: rgba(255,192,203,0.90);         	/* light pink for dark */
	font-style: normal;					   	/* kill italics default */
}
body:not(.dark) & .cm-comment {
	color: #007F00;                        	/* green for light theme */
}
                    	/*******************************/
						/* cursor -- taller and wider */
						/*****************************/
.CodeMirror:not(.CodeMirror-focused) .CodeMirror-cursors {
	visibility: visible !important;			/* in case DW left wrapper hidden */		
	opacity: 1.0;							/* in case animation did not finish */
}
body.dark &
.CodeMirror .CodeMirror-cursor,      		/* yellow for dark themes */
.CodeMirror-cursors:not(.CodeMirror-overwrite) .CodeMirror-cursor {
    border-left: 2px solid yellow !important; 	
    margin-top: -1px !important;
}
body:not(.dark) & 
.CodeMirror .CodeMirror-cursor, 			/* navy blue for light themes */
.CodeMirror-cursors:not(.CodeMirror-overwrite) .CodeMirror-cursor {      
    border-left: 2px solid navy !important; 	
    margin-top: -1px !important;
}

.CodeMirror:not(.CodeMirror-focused) .CodeMirror-overwrite .CodeMirror-cursor { 
    border-left: 1px solid yellow !important; 	
    border-bottom: 0px solid red;       
}
.CodeMirror.CodeMirror-focused .CodeMirror-overwrite .CodeMirror-cursor {
    border-bottom: 3px solid red;   		/* thick red for overwrite mode */    
    margin-top: -2px !important;
    border-left: 0px solid transparent !important;
	width: 0.7em;
}
						/*****************************************/
						/* tail on cursor when code view blured */
						/***************************************/
zzz.CodeMirror.CodeMirror-focused .CodeMirror-cursor:after {    
    border-left-width: 0px !important;
}
.CodeMirror:not(.CodeMirror-focused) .CodeMirror-cursor:after {    
    content: "";                            
    position: absolute;
    top: 0;
    left: 0px;
    border-style: solid;
    border-color: transparent;
    border-width: 7.3px 0px 7px 0px;  
    height: 0px;
    display: inline-block;
}
.CodeMirror:not(.CodeMirror-focused) .CodeMirror-cursor {	                         
    min-height: 14px; 
    line-height:14px;
}
						/****************************************/
						/* blinking cursor in code view blured */
						/**************************************/
@keyframes blinking {                              
  0% { opacity: 1.0; }
  50% { opacity: 0.0; }
  100% { opacity: 1.0; }
}
.CodeMirror:not(.CodeMirror-focused).HTML .CodeMirror-cursor {
		animation: blinking 1.5s 10;		//blinking for 15 sec    
		-webkit-transition: all 1.0s 20.0s;
		transition: all 1.0s 20.0s;			//redundant as safety
		opacity: 1.0;
		border-left-width: 1px;				// solid yellow !important; 	
}
.CodeMirror:not(.CodeMirror-focused) .CodeMirror-cursor:after {    
	border-left-width: 30px !important;
}
body.dark & .CodeMirror:not(.CodeMirror-focused) .CodeMirror-cursor:after {    
    border-left-color: rgba(240,255,0,0.40);
}
body:not(.dark) & .CodeMirror:not(.CodeMirror-focused) .CodeMirror-cursor:after {    
    border-left-color: rgba(159,225,244,0.60);

}
                    /*********************************************/
                    /* BG color of selected text or html tag(s) */
                    /*******************************************/
body.dark & .CodeMirror:not(.CodeMirror-focused) .CodeMirror-selected {
    background: rgba(0, 149, 255, 0.6);
}
body:not(.dark) & .CodeMirror:not(.CodeMirror-focused) .CodeMirror-selected {
    background: rgba(121, 215, 244, 0.7);
}
                    /*************************************/
                    /* arrows above and below selection */
                    /***********************************/
.CodeMirror:not(.CodeMirror-focused).HTML
{
	.CodeMirror-selected:first-of-type:before,
	.CodeMirror-selected:last-of-type:after {
		content: "";
		position: absolute;
		border-style: solid;
		border-color: transparent;
		height: 0px;
		display: inline-block;
	}
	.CodeMirror-selected:first-of-type:before {
		top: -6px;
		left: -11px;
		border-width: 5px 0px 5px 14px;
		transform: rotate(50deg);
	}
	.CodeMirror-selected:last-of-type:after {
		bottom: -6px;
		right: -11px;
		border-width: 5px 14px 5px 0px;
		transform: rotate(50deg);         
	}
	body.dark & .CodeMirror-selected:first-of-type:before {
		border-left-color: #ffc41d; 
	}
	body.dark & .CodeMirror-selected:last-of-type:after {
		border-right-color: #ffc41d;    
	}
	body:not(.dark) & .CodeMirror-selected:first-of-type:before {
		border-left-color: darkblue; 
	}
	body:not(.dark) & .CodeMirror-selected:last-of-type:after {
		border-right-color: darkblue;    
	}
}
                    /************************************/
                    /* tag highlighted -- keeps colors */
                    /**********************************/

/*****************************************************************/
/* end of: Notable code view selection and cursor                */
/*****************************************************************/

span.cm-m-xml.cm-tag.cm-tag-body {
  color: red;
}
